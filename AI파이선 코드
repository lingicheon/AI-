import cv2
import tensorflow.keras
import numpy as np
import requests
import serial
import time
from bs4 import BeautifulSoup


arduino = serial.Serial('com3',9600)

var = 0

## 이미지 전처리
def preprocessing(frame):
    # 사이즈 조정
    size = (224, 224)
    frame_resized = cv2.resize(frame, size, interpolation=cv2.INTER_AREA)
    
    # 이미지 정규화
    frame_normalized = (frame_resized.astype(np.float32) / 127.0) - 1
    
    # 이미지 차원 재조정 - 예측을 위해 reshape 해줍니다.
    frame_reshaped = frame_normalized.reshape((1, 224, 224, 3))
    
    return frame_reshaped

## 학습된 모델 불러오기
model_filename = './converted_keras/keras_model.h5'
model = tensorflow.keras.models.load_model(model_filename)

# 카메라 캡쳐 객체, 0=내장 카메라
capture = cv2.VideoCapture(0)          

# 캡쳐 프레임 사이즈 조절
capture.set(cv2.CAP_PROP_FRAME_WIDTH, 160)
capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 120)
capture.set(cv2.CAP_PROP_AUTOFOCUS)

while True:
    
    ret, frame = capture.read()

    frame_fliped = cv2.flip(frame, 1)
    
    if cv2.waitKey(200) > 0: 
        break
    
    preprocessed = preprocessing(frame_fliped)
    
    prediction = model.predict(preprocessed)
    
    if prediction[0,1] < prediction[0,0] and prediction[0,2] < prediction[0,0] and prediction[0,3] < prediction[0,0] and prediction[0,4] < prediction[0,0] :
        cv2.putText(frame_fliped, 'dog', (20, 30), cv2.FONT_HERSHEY_PLAIN, 2, (0, 255, 0))
        var = 0
        var = str(var)
        var = var.encode('utf-8')
        arduino.write(var)
      
    elif prediction[0,0] < prediction[0,1] and prediction[0,2] < prediction[0,1] and prediction[0,3] < prediction[0,1] and prediction[0,4] < prediction[0,1] :
        cv2.putText(frame_fliped, "horse", (20, 30), cv2.FONT_HERSHEY_PLAIN, 2, (0, 255, 0))
        var = 1
        var = str(var)
        var = var.encode('utf-8')
        arduino.write(var)
       
    elif prediction[0,0] < prediction[0,2] and prediction[0,1] < prediction[0,2] and prediction[0,3] < prediction[0,2] and prediction[0,4] < prediction[0,2] :
        cv2.putText(frame_fliped, "chicken", (20, 30), cv2.FONT_HERSHEY_PLAIN, 2, (0, 255, 0)) 
        var = 2
        var = str(var)
        var = var.encode('utf-8')
        arduino.write(var)
   
    elif prediction[0,0] < prediction[0,3] and prediction[0,2] < prediction[0,3] and prediction[0,4] < prediction[0,3] and prediction[0,1] < prediction[0,3] :
        cv2.putText(frame_fliped, "cat", (20, 30), cv2.FONT_HERSHEY_PLAIN, 2, (0, 255, 0))
        var = 3
        var = str(var)
        var = var.encode('utf-8')
        arduino.write(var)
     
    elif prediction[0,0] < prediction[0,4] and prediction[0,2] < prediction[0,4] and prediction[0,3] < prediction[0,4] and prediction[0,1] < prediction[0,4] :
        cv2.putText(frame_fliped, "squirrel", (20, 30), cv2.FONT_HERSHEY_PLAIN, 2, (0, 255, 0))        
        var = 4
        var = str(var)
        var = var.encode('utf-8')
        arduino.write(var)
     




    cv2.imshow("VideoFrame", frame_fliped)
capture.release() 

cv2.destroyAllWindows()

